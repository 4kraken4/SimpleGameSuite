/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;
import java.util.Random;
import org.graphstream.graph.Graph;
import org.graphstream.graph.Node;
import org.graphstream.graph.implementations.SingleGraph;
/**
 *
 * @author lihin
 */
public class testMinimumPointers extends javax.swing.JFrame {

    /**
     * Creates new form testMinimumPointers
     */
    public testMinimumPointers() {
        initComponents();
        init();
    }
    @SuppressWarnings("unchecked")
    private void init() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );

        pack();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 452, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testMinimumPointers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testMinimumPointers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testMinimumPointers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testMinimumPointers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testMinimumPointers().setVisible(true);
                int[][] matrix = new int[10][10];
                Random random = new Random();

                for (int r = 0; r < 10; r++) {
                    for (int c = 0; c < 10; c++) {
                        matrix[r][c] = random.nextInt(91) + 10;
                    }
                }

                visualizeMatrix(matrix);
            }
        });
    }

    public static void visualizeMatrix(int[][] matrix) {
   
    Graph graph = new SingleGraph("Matrix Graph");

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                String nodeName = "(" + i + "," + j + ")";
                Node node = graph.addNode(nodeName);
                node.setAttribute("ui.label", nodeName);
            }
        }

        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                String nodeName = "(" + i + "," + j + ")";

                if (j < matrix[i].length - 1) {
                    String rightNeighborName = "(" + i + "," + (j + 1) + ")";
                    graph.addEdge(nodeName + "-" + rightNeighborName, nodeName, rightNeighborName);
                }

                if (i < matrix.length - 1) {
                    String bottomNeighborName = "(" + (i + 1) + "," + j + ")";
                    graph.addEdge(nodeName + "-" + bottomNeighborName, nodeName, bottomNeighborName);
                }
            }
        }

        graph.setAttribute("ui.stylesheet", "node { shape: box; size: 20px; fill-color: #C0C0C0; text-size: 12px; }");
        System.setProperty("org.graphstream.ui", "swing");
        graph.display();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
